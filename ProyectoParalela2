

package proyectoparalela2;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.concurrent.*;

public class ProyectoParalela2 extends JFrame {
    private JTextArea areaTexto;
    private JButton botonContarMergeSort;
    private JButton botonContarForkJoin;
    private JButton botonContarExecutorService;
    private JButton botonLimpiar;
    private JTextField resultadoMergeSort;
    private JTextField resultadoForkJoin;
    private JTextField resultadoExecutorService;

    public ProyectoParalela2() {
        setTitle("Contador de Palabras");
        setSize(800, 600); //tamaño de ventana
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //GridBagLayout
        setLayout(new GridBagLayout());
        getContentPane().setBackground(Color.BLACK); //fondo ventata
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;

        areaTexto = new JTextArea(20, 50); // tamaño texto area
        areaTexto.setBackground(Color.BLACK); //color fondo
        areaTexto.setForeground(Color.WHITE); //color texto
        areaTexto.setCaretColor(Color.WHITE); // color cursor
        areaTexto.setLineWrap(true); // ajustar ancho
        areaTexto.setWrapStyleWord(true); //para que las palabras no se corten
        JScrollPane scrollPane = new JScrollPane(areaTexto);
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); //desactivar movimiento horizontal
        add(scrollPane, gbc);

        gbc.gridy++;
        botonContarMergeSort = new JButton("Contar Palabras (Merge Sort)");
        botonContarMergeSort.setBackground(Color.BLACK); // color fondo
        botonContarMergeSort.setForeground(Color.WHITE); // color texto
        botonContarMergeSort.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                contarPalabrasMergeSort();
            }
        });
        add(botonContarMergeSort, gbc);

        gbc.gridy++;
        resultadoMergeSort = new JTextField(20);
        resultadoMergeSort.setBackground(Color.BLACK);
        resultadoMergeSort.setForeground(Color.WHITE);
        resultadoMergeSort.setEditable(false);
        resultadoMergeSort.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        add(resultadoMergeSort, gbc);

        gbc.gridy++;
        botonContarForkJoin = new JButton("Contar Palabras (ForkJoin)");
        botonContarForkJoin.setBackground(Color.BLACK); // color de boton
        botonContarForkJoin.setForeground(Color.WHITE); // color texto boton
        botonContarForkJoin.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                contarPalabrasForkJoin();
            }
        });
        add(botonContarForkJoin, gbc);

        gbc.gridy++;
        resultadoForkJoin = new JTextField(20);
        resultadoForkJoin.setBackground(Color.BLACK);
        resultadoForkJoin.setForeground(Color.WHITE);
        resultadoForkJoin.setEditable(false);
        resultadoForkJoin.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        add(resultadoForkJoin, gbc);

        gbc.gridy++;
        botonContarExecutorService = new JButton("Contar Palabras (ExecutorService)");
        botonContarExecutorService.setBackground(Color.BLACK);
        botonContarExecutorService.setForeground(Color.WHITE);
        botonContarExecutorService.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                contarPalabrasExecutorService();
            }
        });
        add(botonContarExecutorService, gbc);

        gbc.gridy++;
        resultadoExecutorService = new JTextField(20);
        resultadoExecutorService.setBackground(Color.BLACK);
        resultadoExecutorService.setForeground(Color.WHITE);
        resultadoExecutorService.setEditable(false);
        resultadoExecutorService.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        add(resultadoExecutorService, gbc);

        gbc.gridy++;
        botonLimpiar = new JButton("Limpiar Texto");
        botonLimpiar.setBackground(Color.BLACK);
        botonLimpiar.setForeground(Color.WHITE);
        botonLimpiar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                areaTexto.setText("");
            }
        });
        add(botonLimpiar, gbc);
    }

    private void contarPalabrasMergeSort() {
        long startTime = System.nanoTime();
        String texto = areaTexto.getText();
        String[] palabras = texto.split("\\s+"); //dividir texto
        int mid = palabras.length / 2;
        String[] palabras1 = Arrays.copyOfRange(palabras, 0, mid);
        String[] palabras2 = Arrays.copyOfRange(palabras, mid, palabras.length);

        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                mergeSort(palabras1, 0, palabras1.length - 1);
            }
        });
        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                mergeSort(palabras2, 0, palabras2.length - 1);
            }
        });

        thread1.start();
        thread2.start();

        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        merge(palabras, palabras1, palabras2);

        int conteoPalabras = contarPalabras(palabras);
        long endTime = System.nanoTime();
        long tiempoTranscurrido = (endTime - startTime) / 1000; // microsegunddos
        resultadoMergeSort.setText("Número de palabras (Merge Sort): " + conteoPalabras + "\n" +
                "Tiempo transcurrido (Merge Sort): " + tiempoTranscurrido + " microsegundos");
    }

    private void contarPalabrasForkJoin() {
        long startTime = System.nanoTime();
        String texto = areaTexto.getText();
        String[] palabras = texto.split("\\s+");
        int mid = palabras.length / 2;
        String[] palabras1 = Arrays.copyOfRange(palabras, 0, mid);
        String[] palabras2 = Arrays.copyOfRange(palabras, mid, palabras.length);

        ContadorPalabrasForkJoinTask task1 = new ContadorPalabrasForkJoinTask(palabras1);
        ContadorPalabrasForkJoinTask task2 = new ContadorPalabrasForkJoinTask(palabras2);

        ForkJoinTask.invokeAll(task1, task2);

        int conteoPalabras = task1.join() + task2.join();
        long endTime = System.nanoTime();
        long tiempoTranscurrido = (endTime - startTime) / 1000;
        resultadoForkJoin.setText("Número de palabras (ForkJoin): " + conteoPalabras + "\n" +
                "Tiempo transcurrido (ForkJoin): " + tiempoTranscurrido + " microsegundos");
    }

    private void contarPalabrasExecutorService() {
        long startTime = System.nanoTime();
        String texto = areaTexto.getText();
        String[] palabras = texto.split("\\s+");
        int mid = palabras.length / 2;
        String[] palabras1 = Arrays.copyOfRange(palabras, 0, mid);
        String[] palabras2 = Arrays.copyOfRange(palabras, mid, palabras.length);

        ExecutorService executorService = Executors.newFixedThreadPool(2);
        Future<Integer> future1 = executorService.submit(new ContadorPalabrasCallable(palabras1));
        Future<Integer> future2 = executorService.submit(new ContadorPalabrasCallable(palabras2));

        int conteoPalabras = 0;
        try {
            conteoPalabras = future1.get() + future2.get();
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        long endTime = System.nanoTime();
        long tiempoTranscurrido = (endTime - startTime) / 1000;
        resultadoExecutorService.setText("Número de palabras (ExecutorService): " + conteoPalabras + "\n" +
                "Tiempo transcurrido (ExecutorService): " + tiempoTranscurrido + " microsegundos");
    }

    private int contarPalabras(String[] palabras) {
        int conteoPalabras = 0;
        for (String palabra : palabras) {
            if (!palabra.isEmpty()) {
                conteoPalabras++;
            }
        }
        return conteoPalabras;
    }

    //ForkJoin
    private class ContadorPalabrasForkJoinTask extends RecursiveTask<Integer> {
        private String[] palabras;
        private static final int THRESHOLD = 100;

        public ContadorPalabrasForkJoinTask(String[] palabras) {
            this.palabras = palabras;
        }

        @Override
        protected Integer compute() {
            if (palabras.length <= THRESHOLD) {
                return contarPalabras(palabras);
            } else {
                int mid = palabras.length / 2;
                ContadorPalabrasForkJoinTask leftTask = new ContadorPalabrasForkJoinTask(Arrays.copyOfRange(palabras, 0, mid));
                ContadorPalabrasForkJoinTask rightTask = new ContadorPalabrasForkJoinTask(Arrays.copyOfRange(palabras, mid, palabras.length));
                leftTask.fork();
                int rightResult = rightTask.compute();
                int leftResult = leftTask.join();
                return leftResult + rightResult;
            }
        }
    }

    //ExecutorService
    private class ContadorPalabrasCallable implements Callable<Integer> {
        private String[] palabras;

        public ContadorPalabrasCallable(String[] palabras) {
            this.palabras = palabras;
        }

        @Override
        public Integer call() {
            return contarPalabras(palabras);
        }
    }

    //Merge Sort
    private void mergeSort(String[] palabras, int izquierda, int derecha) {
        if (izquierda < derecha) {
            int medio = (izquierda + derecha) / 2;
            mergeSort(palabras, izquierda, medio);
            mergeSort(palabras, medio + 1, derecha);
            merge(palabras, Arrays.copyOfRange(palabras, izquierda, medio + 1), Arrays.copyOfRange(palabras, medio + 1, derecha + 1));
        }
    }

    //combinar dos mitades ordenadas de un arreglo
    private void merge(String[] palabras, String[] palabras1, String[] palabras2) {
        int i = 0, j = 0, k = 0;
        while (i < palabras1.length && j < palabras2.length) {
            if (palabras1[i].compareToIgnoreCase(palabras2[j]) <= 0) {
                palabras[k] = palabras1[i];
                i++;
            } else {
                palabras[k] = palabras2[j];
                j++;
            }
            k++;
        }

        while (i < palabras1.length) {
            palabras[k] = palabras1[i];
            i++;
            k++;
        }

        while (j < palabras2.length) {
            palabras[k] = palabras2[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProyectoParalela2 gui = new ProyectoParalela2();
                gui.setVisible(true);
            }
        });
    }
}
